CREATE TYPE "public"."specialist_enum" AS ENUM(
  'Clinical Psychologist',
  'Educational Psychologist',
  'Psychiatrist',
  'Occupational Therapist',
  'Speech Therapist',
  'Counselor',
  'Family Therapist',
  'Other Therapist',
  'Others'
);

CREATE TABLE
  "public"."specialist" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "created_by" UUID,
    "created_by_name" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE,
    "updated_by" UUID,
    "updated_by_name" TEXT,
    "name" TEXT NOT NULL DEFAULT ''::TEXT,
    "first_name" TEXT NOT NULL DEFAULT ''::TEXT,
    "last_name" TEXT NOT NULL DEFAULT ''::TEXT,
    "organization" TEXT NOT NULL DEFAULT ''::TEXT,
    "contact_number" TEXT NOT NULL DEFAULT ''::TEXT,
    "website" TEXT NOT NULL DEFAULT ''::TEXT,
    "type" specialist_enum NOT NULL,
    "type_others" TEXT NOT NULL DEFAULT ''::TEXT
  );

ALTER TABLE "public"."specialist" OWNER TO "postgres";

ALTER TABLE "public"."specialist" ENABLE ROW LEVEL SECURITY;

CREATE UNIQUE INDEX specialist_pkey ON public.specialist USING btree (id);

ALTER TABLE "public"."specialist"
ADD CONSTRAINT "specialist_pkey" PRIMARY KEY USING INDEX "specialist_pkey";

ALTER TABLE "public"."specialist"
ADD CONSTRAINT "specialist_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."specialist" VALIDATE CONSTRAINT "specialist_created_by_fkey";

ALTER TABLE "public"."specialist"
ADD CONSTRAINT "specialist_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."specialist" VALIDATE CONSTRAINT "specialist_updated_by_fkey";

SET
  check_function_bodies = OFF;

CREATE
OR REPLACE FUNCTION public.update_specialist_name () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
BEGIN
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        NEW."name" = TRIM(BOTH ' ' FROM UPPER(NEW."last_name") || ' ' || NEW."first_name");
        RETURN NEW;
    END IF;
    RETURN NULL;
END;
$function$;

GRANT DELETE ON TABLE "public"."specialist" TO "anon";

GRANT INSERT ON TABLE "public"."specialist" TO "anon";

GRANT REFERENCES ON TABLE "public"."specialist" TO "anon";

GRANT
SELECT
  ON TABLE "public"."specialist" TO "anon";

GRANT TRIGGER ON TABLE "public"."specialist" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."specialist" TO "anon";

GRANT
UPDATE ON TABLE "public"."specialist" TO "anon";

GRANT DELETE ON TABLE "public"."specialist" TO "authenticated";

GRANT INSERT ON TABLE "public"."specialist" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."specialist" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."specialist" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."specialist" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."specialist" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."specialist" TO "authenticated";

GRANT DELETE ON TABLE "public"."specialist" TO "service_role";

GRANT INSERT ON TABLE "public"."specialist" TO "service_role";

GRANT REFERENCES ON TABLE "public"."specialist" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."specialist" TO "service_role";

GRANT TRIGGER ON TABLE "public"."specialist" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."specialist" TO "service_role";

GRANT
UPDATE ON TABLE "public"."specialist" TO "service_role";

CREATE POLICY "Enable delete for creator, LR-GLS, LR-Leadership" ON "public"."specialist" AS permissive FOR DELETE TO authenticated USING (
  (
    (auth.uid () = created_by)
    OR (
      get_role () = ANY (
        ARRAY[
          'Li Ren GLS'::role_enum,
          'Li Ren Leadership'::role_enum
        ]
      )
    )
  )
);

CREATE POLICY "Enable insert for all users" ON "public"."specialist" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (TRUE);

CREATE POLICY "Enable select for all users" ON "public"."specialist" AS permissive FOR
SELECT
  TO authenticated USING (TRUE);

CREATE POLICY "Enable update for creator, LR-GLS, LR-Leadership" ON "public"."specialist" AS permissive FOR
UPDATE TO public USING (TRUE)
WITH
  CHECK (
    (
      (auth.uid () = created_by)
      OR (
        get_role () = ANY (
          ARRAY[
            'Li Ren GLS'::role_enum,
            'Li Ren Leadership'::role_enum
          ]
        )
      )
    )
  );

CREATE TRIGGER case_set_created_meta BEFORE INSERT ON public.specialist FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER case_set_updated_meta BEFORE INSERT
OR
UPDATE ON public.specialist FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE TRIGGER specialist_i_u BEFORE INSERT
OR
UPDATE ON public.specialist FOR EACH ROW
EXECUTE FUNCTION update_specialist_name ();