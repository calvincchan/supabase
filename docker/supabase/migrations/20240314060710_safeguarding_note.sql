CREATE TABLE
  "public"."safeguarding_note" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "created_by" UUID,
    "created_by_name" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE,
    "updated_by" UUID,
    "updated_by_name" TEXT,
    "content" TEXT NOT NULL DEFAULT ''::TEXT,
    "case_id" BIGINT
  );

ALTER TABLE "public"."safeguarding_note" OWNER TO "postgres";

ALTER TABLE "public"."safeguarding_note" ENABLE ROW LEVEL SECURITY;

CREATE UNIQUE INDEX safeguarding_note_pkey ON public.safeguarding_note USING btree (id);

ALTER TABLE "public"."safeguarding_note"
ADD CONSTRAINT "safeguarding_note_pkey" PRIMARY KEY USING INDEX "safeguarding_note_pkey";

ALTER TABLE "public"."safeguarding_note"
ADD CONSTRAINT "safeguarding_note_case_id_fkey" FOREIGN KEY (case_id) REFERENCES "case" (id) ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."safeguarding_note" VALIDATE CONSTRAINT "safeguarding_note_case_id_fkey";

ALTER TABLE "public"."safeguarding_note"
ADD CONSTRAINT "safeguarding_note_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."safeguarding_note" VALIDATE CONSTRAINT "safeguarding_note_created_by_fkey";

ALTER TABLE "public"."safeguarding_note"
ADD CONSTRAINT "safeguarding_note_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."safeguarding_note" VALIDATE CONSTRAINT "safeguarding_note_updated_by_fkey";

GRANT DELETE ON TABLE "public"."safeguarding_note" TO "anon";

GRANT INSERT ON TABLE "public"."safeguarding_note" TO "anon";

GRANT REFERENCES ON TABLE "public"."safeguarding_note" TO "anon";

GRANT
SELECT
  ON TABLE "public"."safeguarding_note" TO "anon";

GRANT TRIGGER ON TABLE "public"."safeguarding_note" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."safeguarding_note" TO "anon";

GRANT
UPDATE ON TABLE "public"."safeguarding_note" TO "anon";

GRANT DELETE ON TABLE "public"."safeguarding_note" TO "authenticated";

GRANT INSERT ON TABLE "public"."safeguarding_note" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."safeguarding_note" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."safeguarding_note" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."safeguarding_note" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."safeguarding_note" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."safeguarding_note" TO "authenticated";

GRANT DELETE ON TABLE "public"."safeguarding_note" TO "service_role";

GRANT INSERT ON TABLE "public"."safeguarding_note" TO "service_role";

GRANT REFERENCES ON TABLE "public"."safeguarding_note" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."safeguarding_note" TO "service_role";

GRANT TRIGGER ON TABLE "public"."safeguarding_note" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."safeguarding_note" TO "service_role";

GRANT
UPDATE ON TABLE "public"."safeguarding_note" TO "service_role";

CREATE POLICY "Enable delete for creator" ON "public"."safeguarding_note" AS permissive FOR DELETE TO authenticated USING ((auth.uid () = created_by));

CREATE POLICY "Enable insert for LR-Contact, LR-GLS" ON "public"."safeguarding_note" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (
    (
      get_role () = ANY (
        ARRAY[
          'Li Ren GLS'::role_enum,
          'Li Ren Contact'::role_enum
        ]
      )
    )
  );

CREATE POLICY "Enable select for creator, GLL, LR-Leadership" ON "public"."safeguarding_note" AS permissive FOR
SELECT
  TO authenticated USING (
    CASE
      WHEN (
        get_role () = ANY (
          ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
        )
      ) THEN TRUE
      ELSE (auth.uid () = created_by)
    END
  );

CREATE POLICY "Enable update for creator" ON "public"."safeguarding_note" AS permissive FOR
UPDATE TO public USING (TRUE)
WITH
  CHECK ((auth.uid () = created_by));

CREATE TRIGGER safeguarding_note_set_created_meta BEFORE INSERT ON public.safeguarding_note FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER safeguarding_note_set_updated_meta BEFORE INSERT
OR
UPDATE ON public.safeguarding_note FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();