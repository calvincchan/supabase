CREATE TABLE
  "public"."page" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "created_by" UUID,
    "created_by_name" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_by" UUID,
    "updated_by_name" TEXT,
    "title" TEXT,
    "content" TEXT
  );

CREATE UNIQUE INDEX page_pkey ON public.page USING btree (id);

ALTER TABLE "public"."page"
ADD CONSTRAINT "page_pkey" PRIMARY KEY USING INDEX "page_pkey";

ALTER TABLE "public"."page"
ADD CONSTRAINT "page_created_by_fkey" FOREIGN KEY (created_by) REFERENCES team_member (id) NOT VALID;

ALTER TABLE "public"."page" VALIDATE CONSTRAINT "page_created_by_fkey";

ALTER TABLE "public"."page"
ADD CONSTRAINT "page_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES team_member (id) NOT VALID;

ALTER TABLE "public"."page" VALIDATE CONSTRAINT "page_updated_by_fkey";

GRANT DELETE ON TABLE "public"."page" TO "anon";

GRANT INSERT ON TABLE "public"."page" TO "anon";

GRANT REFERENCES ON TABLE "public"."page" TO "anon";

GRANT
SELECT
  ON TABLE "public"."page" TO "anon";

GRANT TRIGGER ON TABLE "public"."page" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."page" TO "anon";

GRANT
UPDATE ON TABLE "public"."page" TO "anon";

GRANT DELETE ON TABLE "public"."page" TO "authenticated";

GRANT INSERT ON TABLE "public"."page" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."page" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."page" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."page" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."page" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."page" TO "authenticated";

GRANT DELETE ON TABLE "public"."page" TO "postgres";

GRANT INSERT ON TABLE "public"."page" TO "postgres";

GRANT REFERENCES ON TABLE "public"."page" TO "postgres";

GRANT
SELECT
  ON TABLE "public"."page" TO "postgres";

GRANT TRIGGER ON TABLE "public"."page" TO "postgres";

GRANT
TRUNCATE ON TABLE "public"."page" TO "postgres";

GRANT
UPDATE ON TABLE "public"."page" TO "postgres";

GRANT DELETE ON TABLE "public"."page" TO "service_role";

GRANT INSERT ON TABLE "public"."page" TO "service_role";

GRANT REFERENCES ON TABLE "public"."page" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."page" TO "service_role";

GRANT TRIGGER ON TABLE "public"."page" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."page" TO "service_role";

GRANT
UPDATE ON TABLE "public"."page" TO "service_role";

CREATE TRIGGER audit_i_u_d
AFTER INSERT
OR DELETE
OR
UPDATE ON public.page FOR EACH ROW
EXECUTE FUNCTION audit.insert_update_delete_trigger ();

CREATE TRIGGER audit_t
AFTER
TRUNCATE ON public.page FOR EACH STATEMENT
EXECUTE FUNCTION audit.truncate_trigger ();

CREATE TRIGGER page_set_created_meta BEFORE INSERT ON public.page FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER page_set_updated_meta BEFORE INSERT
OR
UPDATE ON public.page FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE VIEW
  public.page_oplog AS
SELECT
  rv.id,
  rv.record_id,
  rv.old_record_id,
  rv.op,
  rv.ts,
  rv.record,
  rv.old_record,
  rv.auth_uid,
  rv.auth_role,
  tm.name AS actor,
  rv.table_name
FROM
  audit.record_version rv
  LEFT JOIN team_member tm ON rv.auth_uid = tm.id
WHERE
  rv.table_oid = 'page'::regclass::oid;