CREATE TYPE "public"."core_needs_enum" AS ENUM(
  'Learning',
  'Learning (IAA only)',
  'Social emotional',
  'Behavioural',
  'Physical',
  'Giftedness',
  'Others'
);

CREATE TYPE "public"."diagnosis_enum" AS ENUM(
  'Anxiety',
  'Attention (ADHD; ADD)',
  'Autism Spectrum Disorder (ASD) Depression',
  'Dyslexia',
  'Dyscalculia',
  'Dysgraphia',
  'Dyspraxia',
  'Eating disorders',
  'Executive Functioning skills Obsessive Compulsive Disorder',
  'Post-traumatic Stress Disorder',
  'Sensory Processing Disorder',
  'Social Communication Disorder',
  'Others'
);

CREATE TYPE "public"."iaa_enum" AS ENUM(
  'Separate room',
  'Time extension',
  'Word processor',
  'Oral exams (25%)',
  'Listening exam',
  'Scribing',
  'Paper size',
  'Others'
);

CREATE TYPE "public"."iaa_time_extension_enum" AS ENUM(
  '10%',
  '25%',
  '50%',
  'Subjects ALL',
  'Subjects ONLY'
);

CREATE TYPE "public"."iaa_word_processor_enum" AS ENUM(
  'With spellchecker',
  'Without spellchecker',
  'Subjects ONLY'
);

CREATE TYPE "public"."role_enum" AS ENUM(
  'IT Admin',
  'GLL',
  'Nurse',
  'Li Ren Leadership',
  'Li Ren GLS',
  'Li Ren Contact'
);

CREATE TYPE "public"."yes_no_enum" AS ENUM('Y', 'N');

CREATE TABLE
  "public"."case" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "student_name" TEXT NOT NULL DEFAULT ''::TEXT,
    "student_no" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE,
    "updated_by" UUID,
    "is_archived" BOOLEAN,
    "archived_at" TIMESTAMP WITH TIME ZONE,
    "archived_by" UUID,
    "case_status" CHARACTER(1) DEFAULT 'I'::bpchar,
    "updated_by_name" TEXT,
    "grade" CHARACTER VARYING(10),
    "homeroom" CHARACTER VARYING(100),
    "created_by" UUID,
    "created_by_name" TEXT,
    "tier" CHARACTER(1) DEFAULT '1'::bpchar,
    "last_session_at" TIMESTAMP WITH TIME ZONE,
    "next_session_at" TIMESTAMP WITH TIME ZONE,
    "last_session_by" UUID,
    "last_session_by_name" TEXT,
    "student_first_name" TEXT NOT NULL DEFAULT ''::TEXT,
    "student_last_name" TEXT NOT NULL DEFAULT ''::TEXT,
    "background" TEXT,
    "student_other_name" TEXT NOT NULL DEFAULT ''::TEXT,
    "gender" CHARACTER(1),
    "dob" date,
    "email" TEXT,
    "parent_email" TEXT,
    "mother_name" TEXT,
    "mother_phone" TEXT,
    "mother_email" TEXT,
    "father_name" TEXT,
    "father_phone" TEXT,
    "father_email" TEXT,
    "handlers" TEXT NOT NULL DEFAULT ''::TEXT,
    "custom_1" TEXT,
    "custom_2" TEXT,
    "custom_3" TEXT,
    "custom_4" TEXT,
    "custom_5" TEXT,
    "case_opened_at" date,
    "core_needs" core_needs_enum[] DEFAULT '{}'::core_needs_enum[],
    "core_needs_others" TEXT,
    "diagnosis" diagnosis_enum[] DEFAULT '{}'::diagnosis_enum[],
    "diagnosis_others" TEXT,
    "giftedness_identification_year" TEXT,
    "iaa" iaa_enum[] DEFAULT '{}'::iaa_enum[],
    "iaa_listening_exam" TEXT,
    "iaa_others" TEXT,
    "iaa_time_extension" iaa_time_extension_enum,
    "iaa_time_extension_subjects_only" TEXT,
    "iaa_word_processor" iaa_word_processor_enum,
    "iaa_word_processor_subjects_only" TEXT,
    "medical_letter" yes_no_enum,
    "medical_letter_attachments" jsonb DEFAULT '[]'::jsonb,
    "pa_report" yes_no_enum,
    "pa_report_attachments" jsonb DEFAULT '[]'::jsonb,
    "pa_report_last_report_at" date,
    "pa_report_next_report_at" date,
    "safeguarding_concerns" jsonb NOT NULL DEFAULT '{}'::jsonb,
    "safeguarding_concerns_others" TEXT
  );

ALTER TABLE "public"."case" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."case_handler" (
    "case_id" BIGINT NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "user_id" UUID NOT NULL,
    "is_main_handler" BOOLEAN NOT NULL DEFAULT FALSE,
    "created_by" UUID
  );

ALTER TABLE "public"."case_handler" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."page" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "created_by" UUID,
    "created_by_name" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_by" UUID,
    "updated_by_name" TEXT,
    "title" TEXT,
    "content" TEXT
  );

ALTER TABLE "public"."page" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."pending_member" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "role" role_enum,
    "invited_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "activated_at" TIMESTAMP WITH TIME ZONE
  );

ALTER TABLE "public"."pending_member" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."progress_note" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "created_by" UUID,
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_by" UUID,
    "case_id" BIGINT,
    "content" TEXT,
    "created_by_name" TEXT,
    "updated_by_name" TEXT,
    "tags" bpchar[]
  );

ALTER TABLE "public"."progress_note" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."progress_note_attachment" (
    "id" UUID NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "case_id" BIGINT NOT NULL,
    "note_id" BIGINT NOT NULL,
    "name" TEXT NOT NULL,
    "size" BIGINT NOT NULL,
    "type" TEXT NOT NULL
  );

ALTER TABLE "public"."progress_note_attachment" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."reminder" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "created_by" UUID,
    "created_by_name" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_by" UUID,
    "updated_by_name" TEXT,
    "content" TEXT,
    "due_date" TIMESTAMP WITH TIME ZONE,
    "is_completed" BOOLEAN NOT NULL DEFAULT FALSE,
    "completed_at" TIMESTAMP WITH TIME ZONE,
    "completed_by" UUID,
    "completed_by_name" TEXT,
    "case_id" BIGINT
  );

ALTER TABLE "public"."reminder" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."session" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "case_id" BIGINT,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "created_by" UUID,
    "created_by_name" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "updated_by" UUID,
    "updated_by_name" TEXT,
    "started_at" TIMESTAMP WITH TIME ZONE,
    "started_by" UUID,
    "started_by_name" TEXT,
    "completed_at" TIMESTAMP WITH TIME ZONE,
    "completed_by" UUID,
    "completed_by_name" TEXT,
    "content" TEXT NOT NULL DEFAULT ''::TEXT,
    "language" CHARACTER(1) NOT NULL DEFAULT '''E'''::bpchar,
    "status" CHARACTER(1) NOT NULL DEFAULT 'U'::bpchar,
    "start_date" TIMESTAMP WITH TIME ZONE NOT NULL,
    "end_date" TIMESTAMP WITH TIME ZONE NOT NULL,
    "recurrence_rule" TEXT NOT NULL DEFAULT ''::TEXT,
    "time_frame" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "time_frame_until" TIMESTAMP WITH TIME ZONE,
    "mode" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "learning" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "seb" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "counselling" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "cca" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "haoxue" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "non_case" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "parent_session" CHARACTER(1) NOT NULL DEFAULT ''::bpchar,
    "parent_session_note" TEXT,
    "recurrence_parent" BIGINT
  );

ALTER TABLE "public"."session" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."target" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    "created_by" UUID,
    "created_by_name" TEXT,
    "updated_at" TIMESTAMP WITH TIME ZONE,
    "updated_by" UUID,
    "updated_by_name" TEXT,
    "targets" TEXT[] NOT NULL DEFAULT '{}'::TEXT[]
  );

ALTER TABLE "public"."target" ENABLE ROW LEVEL SECURITY;

CREATE TABLE
  "public"."team_member" (
    "id" UUID NOT NULL,
    "name" TEXT NOT NULL,
    "role" role_enum,
    "email" TEXT,
    "last_sign_in_at" TIMESTAMP WITH TIME ZONE
  );

ALTER TABLE "public"."team_member" ENABLE ROW LEVEL SECURITY;

CREATE UNIQUE INDEX case_handler_pkey ON public.case_handler USING btree (case_id, user_id);

CREATE UNIQUE INDEX case_pkey ON public."case" USING btree (id);

CREATE UNIQUE INDEX page_pkey ON public.page USING btree (id);

CREATE UNIQUE INDEX pending_member_pkey ON public.pending_member USING btree (id);

CREATE UNIQUE INDEX progress_note_attachment_pkey ON public.progress_note_attachment USING btree (id);

CREATE UNIQUE INDEX progress_note_pkey ON public.progress_note USING btree (id);

CREATE UNIQUE INDEX reminder_pkey ON public.reminder USING btree (id);

CREATE UNIQUE INDEX session_pkey ON public.session USING btree (id);

CREATE UNIQUE INDEX target_pkey ON public.target USING btree (id);

CREATE UNIQUE INDEX team_member_pkey ON public.team_member USING btree (id);

ALTER TABLE "public"."case"
ADD CONSTRAINT "case_pkey" PRIMARY KEY USING INDEX "case_pkey";

ALTER TABLE "public"."case_handler"
ADD CONSTRAINT "case_handler_pkey" PRIMARY KEY USING INDEX "case_handler_pkey";

ALTER TABLE "public"."page"
ADD CONSTRAINT "page_pkey" PRIMARY KEY USING INDEX "page_pkey";

ALTER TABLE "public"."pending_member"
ADD CONSTRAINT "pending_member_pkey" PRIMARY KEY USING INDEX "pending_member_pkey";

ALTER TABLE "public"."progress_note"
ADD CONSTRAINT "progress_note_pkey" PRIMARY KEY USING INDEX "progress_note_pkey";

ALTER TABLE "public"."progress_note_attachment"
ADD CONSTRAINT "progress_note_attachment_pkey" PRIMARY KEY USING INDEX "progress_note_attachment_pkey";

ALTER TABLE "public"."reminder"
ADD CONSTRAINT "reminder_pkey" PRIMARY KEY USING INDEX "reminder_pkey";

ALTER TABLE "public"."session"
ADD CONSTRAINT "session_pkey" PRIMARY KEY USING INDEX "session_pkey";

ALTER TABLE "public"."target"
ADD CONSTRAINT "target_pkey" PRIMARY KEY USING INDEX "target_pkey";

ALTER TABLE "public"."team_member"
ADD CONSTRAINT "team_member_pkey" PRIMARY KEY USING INDEX "team_member_pkey";

ALTER TABLE "public"."case"
ADD CONSTRAINT "case_case_status_check" CHECK (
  (
    case_status = ANY (
      ARRAY[
        'I'::bpchar,
        'C'::bpchar,
        'N'::bpchar,
        'A'::bpchar,
        'R'::bpchar,
        'X'::bpchar
      ]
    )
  )
) NOT VALID;

ALTER TABLE "public"."case" VALIDATE CONSTRAINT "case_case_status_check";

ALTER TABLE "public"."case"
ADD CONSTRAINT "case_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."case" VALIDATE CONSTRAINT "case_created_by_fkey";

ALTER TABLE "public"."case"
ADD CONSTRAINT "case_gender_check" CHECK (
  (
    gender = ANY (
      ARRAY[
        NULL::bpchar,
        'M'::bpchar,
        'F'::bpchar,
        'U'::bpchar
      ]
    )
  )
) NOT VALID;

ALTER TABLE "public"."case" VALIDATE CONSTRAINT "case_gender_check";

ALTER TABLE "public"."case"
ADD CONSTRAINT "case_last_session_by_fkey" FOREIGN KEY (last_session_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."case" VALIDATE CONSTRAINT "case_last_session_by_fkey";

ALTER TABLE "public"."case"
ADD CONSTRAINT "case_tier_check" CHECK (
  (
    tier = ANY (ARRAY['1'::bpchar, '2'::bpchar, '3'::bpchar])
  )
) NOT VALID;

ALTER TABLE "public"."case" VALIDATE CONSTRAINT "case_tier_check";

ALTER TABLE "public"."case"
ADD CONSTRAINT "case_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."case" VALIDATE CONSTRAINT "case_updated_by_fkey";

ALTER TABLE "public"."case_handler"
ADD CONSTRAINT "case_handler_case_id_fkey" FOREIGN KEY (case_id) REFERENCES "case" (id) ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."case_handler" VALIDATE CONSTRAINT "case_handler_case_id_fkey";

ALTER TABLE "public"."case_handler"
ADD CONSTRAINT "case_handler_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."case_handler" VALIDATE CONSTRAINT "case_handler_created_by_fkey";

ALTER TABLE "public"."case_handler"
ADD CONSTRAINT "case_handler_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."case_handler" VALIDATE CONSTRAINT "case_handler_user_id_fkey";

ALTER TABLE "public"."page"
ADD CONSTRAINT "page_created_by_fkey" FOREIGN KEY (created_by) REFERENCES team_member (id) NOT VALID;

ALTER TABLE "public"."page" VALIDATE CONSTRAINT "page_created_by_fkey";

ALTER TABLE "public"."page"
ADD CONSTRAINT "page_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES team_member (id) NOT VALID;

ALTER TABLE "public"."page" VALIDATE CONSTRAINT "page_updated_by_fkey";

ALTER TABLE "public"."progress_note"
ADD CONSTRAINT "progress_note_case_id_fkey" FOREIGN KEY (case_id) REFERENCES "case" (id) ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."progress_note" VALIDATE CONSTRAINT "progress_note_case_id_fkey";

ALTER TABLE "public"."progress_note"
ADD CONSTRAINT "progress_note_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."progress_note" VALIDATE CONSTRAINT "progress_note_created_by_fkey";

ALTER TABLE "public"."progress_note"
ADD CONSTRAINT "progress_note_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."progress_note" VALIDATE CONSTRAINT "progress_note_updated_by_fkey";

ALTER TABLE "public"."progress_note_attachment"
ADD CONSTRAINT "progress_note_attachment_case_id_fkey" FOREIGN KEY (case_id) REFERENCES "case" (id) ON UPDATE RESTRICT ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."progress_note_attachment" VALIDATE CONSTRAINT "progress_note_attachment_case_id_fkey";

ALTER TABLE "public"."progress_note_attachment"
ADD CONSTRAINT "progress_note_attachment_note_id_fkey" FOREIGN KEY (note_id) REFERENCES progress_note (id) ON UPDATE RESTRICT ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."progress_note_attachment" VALIDATE CONSTRAINT "progress_note_attachment_note_id_fkey";

ALTER TABLE "public"."reminder"
ADD CONSTRAINT "reminder_case_id_fkey" FOREIGN KEY (case_id) REFERENCES "case" (id) NOT VALID;

ALTER TABLE "public"."reminder" VALIDATE CONSTRAINT "reminder_case_id_fkey";

ALTER TABLE "public"."reminder"
ADD CONSTRAINT "reminder_completed_by_fkey" FOREIGN KEY (completed_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."reminder" VALIDATE CONSTRAINT "reminder_completed_by_fkey";

ALTER TABLE "public"."reminder"
ADD CONSTRAINT "reminder_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."reminder" VALIDATE CONSTRAINT "reminder_created_by_fkey";

ALTER TABLE "public"."reminder"
ADD CONSTRAINT "reminder_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."reminder" VALIDATE CONSTRAINT "reminder_updated_by_fkey";

ALTER TABLE "public"."session"
ADD CONSTRAINT "session_case_id_fkey" FOREIGN KEY (case_id) REFERENCES "case" (id) NOT VALID;

ALTER TABLE "public"."session" VALIDATE CONSTRAINT "session_case_id_fkey";

ALTER TABLE "public"."session"
ADD CONSTRAINT "session_completed_by_fkey" FOREIGN KEY (completed_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."session" VALIDATE CONSTRAINT "session_completed_by_fkey";

ALTER TABLE "public"."session"
ADD CONSTRAINT "session_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."session" VALIDATE CONSTRAINT "session_created_by_fkey";

ALTER TABLE "public"."session"
ADD CONSTRAINT "session_recurrence_parent_fkey" FOREIGN KEY (recurrence_parent) REFERENCES SESSION (id) NOT VALID;

ALTER TABLE "public"."session" VALIDATE CONSTRAINT "session_recurrence_parent_fkey";

ALTER TABLE "public"."session"
ADD CONSTRAINT "session_started_by_fkey" FOREIGN KEY (started_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."session" VALIDATE CONSTRAINT "session_started_by_fkey";

ALTER TABLE "public"."session"
ADD CONSTRAINT "session_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."session" VALIDATE CONSTRAINT "session_updated_by_fkey";

ALTER TABLE "public"."target"
ADD CONSTRAINT "target_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."target" VALIDATE CONSTRAINT "target_created_by_fkey";

ALTER TABLE "public"."target"
ADD CONSTRAINT "target_id_fkey" FOREIGN KEY (id) REFERENCES "case" (id) ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."target" VALIDATE CONSTRAINT "target_id_fkey";

ALTER TABLE "public"."target"
ADD CONSTRAINT "target_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES auth.users (id) NOT VALID;

ALTER TABLE "public"."target" VALIDATE CONSTRAINT "target_updated_by_fkey";

ALTER TABLE "public"."team_member"
ADD CONSTRAINT "team_member_id_fkey" FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE NOT VALID;

ALTER TABLE "public"."team_member" VALIDATE CONSTRAINT "team_member_id_fkey";

CREATE
OR REPLACE FUNCTION public.find_next_upcoming_session (p_case_id BIGINT) RETURNS TIMESTAMP WITH TIME ZONE LANGUAGE plpgsql AS $function$
DECLARE
  closest_start_date TIMESTAMP WITH TIME ZONE;
BEGIN
  SELECT start_date INTO closest_start_date
  FROM session
  WHERE case_id = p_case_id AND status = 'U' AND start_date >= CURRENT_DATE
  ORDER BY start_date ASC
  LIMIT 1;

  RETURN closest_start_date;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.get_case_handler_details (p_case_id BIGINT) RETURNS TABLE (
  user_id UUID,
  case_id BIGINT,
  NAME TEXT,
  is_main_handler BOOLEAN
) LANGUAGE plpgsql AS $function$
BEGIN
  RETURN QUERY
  SELECT a.user_id, a.case_id, b.name, a.is_main_handler
  FROM case_handler AS a
  JOIN team_member AS b ON a.user_id = b.id
  WHERE a.case_id = p_case_id
  ORDER BY b.name;END;
$function$;

CREATE
OR REPLACE FUNCTION public.get_cases_by_handler (p_user_id UUID) RETURNS TABLE (
  id BIGINT,
  student_name TEXT,
  student_no TEXT,
  next_session_at TIMESTAMP WITH TIME ZONE
) LANGUAGE plpgsql AS $function$
BEGIN
  RETURN QUERY
  SELECT a.id, a.student_name, a.student_no, a.next_session_at
  FROM "case" AS a
  JOIN "case_handler" AS b ON a.id = b.case_id
  WHERE b.user_id = p_user_id
  ORDER BY a.next_session_at;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.get_name () RETURNS TEXT LANGUAGE plpgsql AS $function$
DECLARE
  v_name TEXT;
BEGIN
  SELECT name INTO v_name FROM team_member WHERE id = auth.uid();
  RETURN v_name;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.get_role () RETURNS role_enum LANGUAGE plpgsql AS $function$
DECLARE
  v_role role_enum;
BEGIN
  SELECT role INTO v_role FROM team_member WHERE id = auth.uid();
  RETURN v_role;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.insert_into_target () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
BEGIN
    INSERT INTO "target" ("id")
    VALUES (NEW."id");
    RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.insert_user () RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER AS $function$
BEGIN
  INSERT INTO public.team_member (id, email, name, role)
  VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'name', NEW.raw_user_meta_data->>'role');
  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.is_case_handler (p_case_id BIGINT) RETURNS BOOLEAN LANGUAGE plpgsql AS $function$
BEGIN
  RETURN (
    SELECT EXISTS(
      SELECT 1 FROM case_handler WHERE case_id = p_case_id AND user_id = auth.uid()
    )
  );
END;
$function$;

CREATE
OR REPLACE FUNCTION public.is_creator () RETURNS BOOLEAN LANGUAGE plpgsql AS $function$
BEGIN
  RETURN created_by = auth.uid();
END;
$function$;

CREATE
OR REPLACE FUNCTION public.is_manager () RETURNS BOOLEAN LANGUAGE plpgsql AS $function$
BEGIN
  RETURN (
    SELECT EXISTS(
      SELECT 1 FROM team_member WHERE id = auth.uid() AND role = 'A'
    )
  );
END;
$function$;

CREATE OR REPLACE VIEW
  "public"."my_case" AS
SELECT
  a.id,
  a.created_at,
  a.student_name,
  a.student_no,
  a.updated_at,
  a.updated_by,
  a.is_archived,
  a.archived_at,
  a.archived_by,
  a.case_status,
  a.updated_by_name,
  a.grade,
  a.homeroom,
  a.created_by,
  a.created_by_name,
  a.tier,
  a.last_session_at,
  a.next_session_at,
  a.last_session_by,
  a.last_session_by_name,
  a.handlers,
  a.student_first_name,
  a.student_last_name,
  a.background,
  a.student_other_name
FROM
  (
    "case" a
    JOIN case_handler b ON ((a.id = b.case_id))
  )
WHERE
  (b.user_id = auth.uid ());

CREATE
OR REPLACE FUNCTION public.set_completed_meta () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
BEGIN
  IF NEW.is_completed = TRUE THEN
    NEW.completed_at := now();
    NEW.completed_by := auth.uid();
    SELECT get_name() INTO NEW.completed_by_name;
  ELSE
    NEW.completed_at := null;
    NEW.completed_by := null;
    NEW.completed_by_name := null;
  END IF;
  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.set_main_handler (p_case_id BIGINT, p_user_id UUID) RETURNS void LANGUAGE plpgsql AS $function$
BEGIN
  -- Set all rows with the given p_case_id to is_main_handler = false
  UPDATE case_handler
  SET is_main_handler = false
  WHERE case_id = p_case_id;

  -- Set the row with the given p_case_id and p_user_id to is_main_handler = true
  UPDATE case_handler
  SET is_main_handler = true
  WHERE case_id = p_case_id AND user_id = p_user_id;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.team_member_i_u_from_sso () RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER AS $function$
DECLARE
    new_name text;
    new_role public.role_enum;
BEGIN
    IF NEW.is_sso_user = TRUE THEN
        -- The first sso user will be a manager
        IF NOT EXISTS (SELECT 1 FROM public.team_member LIMIT 1) THEN
            INSERT INTO public.team_member(id, name, email, role, last_sign_in_at)
            VALUES (NEW.id, '(new sso user)', NEW.email, 'IT Admin'::public.role_enum, NEW.last_sign_in_at);
        ELSE
            -- Check if the user is already a team member
            IF EXISTS (SELECT 1 FROM public.team_member WHERE email = NEW.email) THEN
                -- Update the last_sign_in_at
                UPDATE public.team_member
                SET last_sign_in_at = NEW.last_sign_in_at
                WHERE email = NEW.email;
            ELSE
                -- Check if the user is invited
                IF EXISTS (SELECT 1 FROM public.pending_member WHERE id = NEW.email) THEN
                    -- Insert the user into team_member and update the invite status
                    SELECT name, role INTO new_name, new_role FROM public.pending_member WHERE id = NEW.email;
                    INSERT INTO public.team_member(id, name, email, role, last_sign_in_at)
                    VALUES (NEW.id, new_name, NEW.email, new_role, NEW.last_sign_in_at);
                    UPDATE public.pending_member SET activated_at = NOW() WHERE id = NEW.email;
                ELSE
                    -- throw error
                    RAISE EXCEPTION 'SSO user % is not invited', NEW.email;
                END IF;
            END IF;
        END IF;
    END IF;
    RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.trigger_on_session_status () RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER AS $function$
BEGIN
  IF OLD.status = 'U' AND NEW.status = 'I' THEN
    UPDATE "case" SET last_session_at = NOW(), last_session_by = auth.uid(), last_session_by_name = get_name() WHERE id = NEW.case_id;
    NEW.started_at = NOW();
    NEW.started_by = auth.uid();
    SELECT get_name() INTO NEW.started_by_name;
  END IF;
  IF OLD.status = 'I' AND NEW.status = 'X' THEN
    UPDATE "case" SET last_session_at = NOW(), last_session_by = auth.uid(), last_session_by_name = get_name() WHERE id = NEW.case_id;
    NEW.completed_at = NOW();
    NEW.completed_by = auth.uid();
    SELECT get_name() INTO NEW.completed_by_name;
  END IF;
  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.trigger_set_created_meta () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
BEGIN
  NEW.created_by := auth.uid();
  SELECT get_name() INTO NEW.created_by_name;
  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.trigger_set_handlers () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
DECLARE
  handlers_string TEXT;
  p_case_id BIGINT;
BEGIN
  IF TG_OP = 'DELETE' THEN
    p_case_id := OLD.case_id;
  ELSE
    p_case_id := NEW.case_id;
  END IF;

  SELECT STRING_AGG(b.name, '|' ORDER BY a.is_main_handler DESC, b.name ASC) INTO handlers_string
  FROM case_handler AS a
  JOIN team_member AS b ON a.user_id = b.id
  WHERE a.case_id = p_case_id;

  UPDATE "case" SET handlers = COALESCE(handlers_string, '') WHERE id = p_case_id;

  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.trigger_set_main_handler () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
DECLARE
  main_handler_exists BOOLEAN;
BEGIN
  -- Check if there is another row with the same case_id and is_main_handler = true
  SELECT EXISTS (
    SELECT 1
    FROM case_handler
    WHERE case_id = NEW.case_id AND is_main_handler = true
  ) INTO main_handler_exists;

  -- If no other row with is_main_handler = true exists, set the current row's is_main_handler to true
  IF NOT main_handler_exists THEN
    NEW.is_main_handler := true;
  END IF;

  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.trigger_set_next_upcoming_session () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
DECLARE
  p_case_id BIGINT;
BEGIN
  IF TG_OP = 'DELETE' THEN
    p_case_id := OLD.case_id;
  ELSE
    p_case_id := NEW.case_id;
  END IF;

  UPDATE "case" SET next_session_at = find_next_upcoming_session(p_case_id) WHERE id = p_case_id;

  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.trigger_set_updated_meta () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
BEGIN
  NEW.updated_at := now();
  NEW.updated_by := auth.uid();
  SELECT get_name() INTO NEW.updated_by_name;
  RETURN NEW;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.update_student_name () RETURNS TRIGGER LANGUAGE plpgsql AS $function$
BEGIN
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        NEW."student_name" = TRIM(BOTH ' ' FROM UPPER(NEW."student_last_name") || ' ' || NEW."student_first_name");
        RETURN NEW;
    END IF;
    RETURN NULL;
END;
$function$;

CREATE
OR REPLACE FUNCTION public.update_user () RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER AS $function$
BEGIN
  UPDATE public.team_member
  SET email = NEW.email,
      name = NEW.raw_user_meta_data->>'name',
      role = NEW.raw_user_meta_data->>'role'
  WHERE id = NEW.id;

  RETURN NEW;
END;
$function$;

GRANT DELETE ON TABLE "public"."case" TO "anon";

GRANT INSERT ON TABLE "public"."case" TO "anon";

GRANT REFERENCES ON TABLE "public"."case" TO "anon";

GRANT
SELECT
  ON TABLE "public"."case" TO "anon";

GRANT TRIGGER ON TABLE "public"."case" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."case" TO "anon";

GRANT
UPDATE ON TABLE "public"."case" TO "anon";

GRANT DELETE ON TABLE "public"."case" TO "authenticated";

GRANT INSERT ON TABLE "public"."case" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."case" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."case" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."case" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."case" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."case" TO "authenticated";

GRANT DELETE ON TABLE "public"."case" TO "service_role";

GRANT INSERT ON TABLE "public"."case" TO "service_role";

GRANT REFERENCES ON TABLE "public"."case" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."case" TO "service_role";

GRANT TRIGGER ON TABLE "public"."case" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."case" TO "service_role";

GRANT
UPDATE ON TABLE "public"."case" TO "service_role";

GRANT DELETE ON TABLE "public"."case_handler" TO "anon";

GRANT INSERT ON TABLE "public"."case_handler" TO "anon";

GRANT REFERENCES ON TABLE "public"."case_handler" TO "anon";

GRANT
SELECT
  ON TABLE "public"."case_handler" TO "anon";

GRANT TRIGGER ON TABLE "public"."case_handler" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."case_handler" TO "anon";

GRANT
UPDATE ON TABLE "public"."case_handler" TO "anon";

GRANT DELETE ON TABLE "public"."case_handler" TO "authenticated";

GRANT INSERT ON TABLE "public"."case_handler" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."case_handler" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."case_handler" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."case_handler" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."case_handler" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."case_handler" TO "authenticated";

GRANT DELETE ON TABLE "public"."case_handler" TO "service_role";

GRANT INSERT ON TABLE "public"."case_handler" TO "service_role";

GRANT REFERENCES ON TABLE "public"."case_handler" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."case_handler" TO "service_role";

GRANT TRIGGER ON TABLE "public"."case_handler" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."case_handler" TO "service_role";

GRANT
UPDATE ON TABLE "public"."case_handler" TO "service_role";

GRANT DELETE ON TABLE "public"."page" TO "anon";

GRANT INSERT ON TABLE "public"."page" TO "anon";

GRANT REFERENCES ON TABLE "public"."page" TO "anon";

GRANT
SELECT
  ON TABLE "public"."page" TO "anon";

GRANT TRIGGER ON TABLE "public"."page" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."page" TO "anon";

GRANT
UPDATE ON TABLE "public"."page" TO "anon";

GRANT DELETE ON TABLE "public"."page" TO "authenticated";

GRANT INSERT ON TABLE "public"."page" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."page" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."page" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."page" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."page" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."page" TO "authenticated";

GRANT DELETE ON TABLE "public"."page" TO "service_role";

GRANT INSERT ON TABLE "public"."page" TO "service_role";

GRANT REFERENCES ON TABLE "public"."page" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."page" TO "service_role";

GRANT TRIGGER ON TABLE "public"."page" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."page" TO "service_role";

GRANT
UPDATE ON TABLE "public"."page" TO "service_role";

GRANT DELETE ON TABLE "public"."pending_member" TO "anon";

GRANT INSERT ON TABLE "public"."pending_member" TO "anon";

GRANT REFERENCES ON TABLE "public"."pending_member" TO "anon";

GRANT
SELECT
  ON TABLE "public"."pending_member" TO "anon";

GRANT TRIGGER ON TABLE "public"."pending_member" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."pending_member" TO "anon";

GRANT
UPDATE ON TABLE "public"."pending_member" TO "anon";

GRANT DELETE ON TABLE "public"."pending_member" TO "authenticated";

GRANT INSERT ON TABLE "public"."pending_member" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."pending_member" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."pending_member" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."pending_member" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."pending_member" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."pending_member" TO "authenticated";

GRANT DELETE ON TABLE "public"."pending_member" TO "service_role";

GRANT INSERT ON TABLE "public"."pending_member" TO "service_role";

GRANT REFERENCES ON TABLE "public"."pending_member" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."pending_member" TO "service_role";

GRANT TRIGGER ON TABLE "public"."pending_member" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."pending_member" TO "service_role";

GRANT
UPDATE ON TABLE "public"."pending_member" TO "service_role";

GRANT DELETE ON TABLE "public"."progress_note" TO "anon";

GRANT INSERT ON TABLE "public"."progress_note" TO "anon";

GRANT REFERENCES ON TABLE "public"."progress_note" TO "anon";

GRANT
SELECT
  ON TABLE "public"."progress_note" TO "anon";

GRANT TRIGGER ON TABLE "public"."progress_note" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."progress_note" TO "anon";

GRANT
UPDATE ON TABLE "public"."progress_note" TO "anon";

GRANT DELETE ON TABLE "public"."progress_note" TO "authenticated";

GRANT INSERT ON TABLE "public"."progress_note" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."progress_note" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."progress_note" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."progress_note" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."progress_note" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."progress_note" TO "authenticated";

GRANT DELETE ON TABLE "public"."progress_note" TO "service_role";

GRANT INSERT ON TABLE "public"."progress_note" TO "service_role";

GRANT REFERENCES ON TABLE "public"."progress_note" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."progress_note" TO "service_role";

GRANT TRIGGER ON TABLE "public"."progress_note" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."progress_note" TO "service_role";

GRANT
UPDATE ON TABLE "public"."progress_note" TO "service_role";

GRANT DELETE ON TABLE "public"."progress_note_attachment" TO "anon";

GRANT INSERT ON TABLE "public"."progress_note_attachment" TO "anon";

GRANT REFERENCES ON TABLE "public"."progress_note_attachment" TO "anon";

GRANT
SELECT
  ON TABLE "public"."progress_note_attachment" TO "anon";

GRANT TRIGGER ON TABLE "public"."progress_note_attachment" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."progress_note_attachment" TO "anon";

GRANT
UPDATE ON TABLE "public"."progress_note_attachment" TO "anon";

GRANT DELETE ON TABLE "public"."progress_note_attachment" TO "authenticated";

GRANT INSERT ON TABLE "public"."progress_note_attachment" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."progress_note_attachment" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."progress_note_attachment" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."progress_note_attachment" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."progress_note_attachment" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."progress_note_attachment" TO "authenticated";

GRANT DELETE ON TABLE "public"."progress_note_attachment" TO "service_role";

GRANT INSERT ON TABLE "public"."progress_note_attachment" TO "service_role";

GRANT REFERENCES ON TABLE "public"."progress_note_attachment" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."progress_note_attachment" TO "service_role";

GRANT TRIGGER ON TABLE "public"."progress_note_attachment" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."progress_note_attachment" TO "service_role";

GRANT
UPDATE ON TABLE "public"."progress_note_attachment" TO "service_role";

GRANT DELETE ON TABLE "public"."reminder" TO "anon";

GRANT INSERT ON TABLE "public"."reminder" TO "anon";

GRANT REFERENCES ON TABLE "public"."reminder" TO "anon";

GRANT
SELECT
  ON TABLE "public"."reminder" TO "anon";

GRANT TRIGGER ON TABLE "public"."reminder" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."reminder" TO "anon";

GRANT
UPDATE ON TABLE "public"."reminder" TO "anon";

GRANT DELETE ON TABLE "public"."reminder" TO "authenticated";

GRANT INSERT ON TABLE "public"."reminder" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."reminder" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."reminder" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."reminder" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."reminder" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."reminder" TO "authenticated";

GRANT DELETE ON TABLE "public"."reminder" TO "service_role";

GRANT INSERT ON TABLE "public"."reminder" TO "service_role";

GRANT REFERENCES ON TABLE "public"."reminder" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."reminder" TO "service_role";

GRANT TRIGGER ON TABLE "public"."reminder" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."reminder" TO "service_role";

GRANT
UPDATE ON TABLE "public"."reminder" TO "service_role";

GRANT DELETE ON TABLE "public"."session" TO "anon";

GRANT INSERT ON TABLE "public"."session" TO "anon";

GRANT REFERENCES ON TABLE "public"."session" TO "anon";

GRANT
SELECT
  ON TABLE "public"."session" TO "anon";

GRANT TRIGGER ON TABLE "public"."session" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."session" TO "anon";

GRANT
UPDATE ON TABLE "public"."session" TO "anon";

GRANT DELETE ON TABLE "public"."session" TO "authenticated";

GRANT INSERT ON TABLE "public"."session" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."session" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."session" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."session" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."session" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."session" TO "authenticated";

GRANT DELETE ON TABLE "public"."session" TO "service_role";

GRANT INSERT ON TABLE "public"."session" TO "service_role";

GRANT REFERENCES ON TABLE "public"."session" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."session" TO "service_role";

GRANT TRIGGER ON TABLE "public"."session" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."session" TO "service_role";

GRANT
UPDATE ON TABLE "public"."session" TO "service_role";

GRANT DELETE ON TABLE "public"."target" TO "anon";

GRANT INSERT ON TABLE "public"."target" TO "anon";

GRANT REFERENCES ON TABLE "public"."target" TO "anon";

GRANT
SELECT
  ON TABLE "public"."target" TO "anon";

GRANT TRIGGER ON TABLE "public"."target" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."target" TO "anon";

GRANT
UPDATE ON TABLE "public"."target" TO "anon";

GRANT DELETE ON TABLE "public"."target" TO "authenticated";

GRANT INSERT ON TABLE "public"."target" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."target" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."target" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."target" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."target" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."target" TO "authenticated";

GRANT DELETE ON TABLE "public"."target" TO "service_role";

GRANT INSERT ON TABLE "public"."target" TO "service_role";

GRANT REFERENCES ON TABLE "public"."target" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."target" TO "service_role";

GRANT TRIGGER ON TABLE "public"."target" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."target" TO "service_role";

GRANT
UPDATE ON TABLE "public"."target" TO "service_role";

GRANT DELETE ON TABLE "public"."team_member" TO "anon";

GRANT INSERT ON TABLE "public"."team_member" TO "anon";

GRANT REFERENCES ON TABLE "public"."team_member" TO "anon";

GRANT
SELECT
  ON TABLE "public"."team_member" TO "anon";

GRANT TRIGGER ON TABLE "public"."team_member" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."team_member" TO "anon";

GRANT
UPDATE ON TABLE "public"."team_member" TO "anon";

GRANT DELETE ON TABLE "public"."team_member" TO "authenticated";

GRANT INSERT ON TABLE "public"."team_member" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."team_member" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."team_member" TO "authenticated";

GRANT TRIGGER ON TABLE "public"."team_member" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."team_member" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."team_member" TO "authenticated";

GRANT DELETE ON TABLE "public"."team_member" TO "service_role";

GRANT INSERT ON TABLE "public"."team_member" TO "service_role";

GRANT REFERENCES ON TABLE "public"."team_member" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."team_member" TO "service_role";

GRANT TRIGGER ON TABLE "public"."team_member" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."team_member" TO "service_role";

GRANT
UPDATE ON TABLE "public"."team_member" TO "service_role";

CREATE POLICY "Disable delete" ON "public"."case" AS permissive FOR DELETE TO public USING (FALSE);

CREATE POLICY "Enable insert for LR-Leadership, LR-GLS, LR-Contact" ON "public"."case" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (
    (
      get_role () = ANY (
        ARRAY[
          'Li Ren Leadership'::role_enum,
          'Li Ren GLS'::role_enum,
          'Li Ren Contact'::role_enum
        ]
      )
    )
  );

CREATE POLICY "Enable select for all users" ON "public"."case" AS permissive FOR
SELECT
  TO authenticated USING (TRUE);

CREATE POLICY "Enable update for creator and LR-Leadership, LR-GLS" ON "public"."case" AS permissive FOR
UPDATE TO authenticated USING (TRUE)
WITH
  CHECK (
    (
      (auth.uid () = created_by)
      OR (
        get_role () = ANY (
          ARRAY[
            'Li Ren GLS'::role_enum,
            'Li Ren Leadership'::role_enum
          ]
        )
      )
    )
  );

CREATE POLICY "Enable full access for all users" ON "public"."case_handler" AS permissive FOR ALL TO authenticated USING (TRUE)
WITH
  CHECK (TRUE);

CREATE POLICY "Enable delete for creator, GLL, LR-Leadership" ON "public"."page" AS permissive FOR DELETE TO authenticated USING (
  (
    (auth.uid () = created_by)
    OR (
      get_role () = ANY (
        ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
      )
    )
  )
);

CREATE POLICY "Enable insert for all users" ON "public"."page" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (TRUE);

CREATE POLICY "Enable select for all users" ON "public"."page" AS permissive FOR
SELECT
  TO authenticated USING (TRUE);

CREATE POLICY "Enable update for creator, GLL, LR-Leadership" ON "public"."page" AS permissive FOR
UPDATE TO authenticated USING (TRUE)
WITH
  CHECK (
    (
      (auth.uid () = created_by)
      OR (
        get_role () = ANY (
          ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
        )
      )
    )
  );

CREATE POLICY "Enable all operations for IT-Admin and LR-Leadership" ON "public"."pending_member" AS permissive FOR ALL TO authenticated USING (
  (
    get_role () = ANY (
      ARRAY[
        'IT Admin'::role_enum,
        'Li Ren Leadership'::role_enum
      ]
    )
  )
)
WITH
  CHECK (TRUE);

CREATE POLICY "Enable delete for creator, GLL, LR-Leadership" ON "public"."progress_note" AS permissive FOR DELETE TO authenticated USING (
  (
    (auth.uid () = created_by)
    OR (
      get_role () = ANY (
        ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
      )
    )
  )
);

CREATE POLICY "Enable insert for GLL, Nurse, LR-Leadership, LR-GLS, LR-Contact" ON "public"."progress_note" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (
    (
      get_role () = ANY (
        ARRAY[
          'GLL'::role_enum,
          'Nurse'::role_enum,
          'Li Ren Leadership'::role_enum,
          'Li Ren GLS'::role_enum,
          'Li Ren Contact'::role_enum
        ]
      )
    )
  );

CREATE POLICY "Enable select for all users" ON "public"."progress_note" AS permissive FOR
SELECT
  TO authenticated USING (TRUE);

CREATE POLICY "Enable update for creator, GLL, LR-Leadership" ON "public"."progress_note" AS permissive FOR
UPDATE TO authenticated USING (TRUE)
WITH
  CHECK (
    (
      (auth.uid () = created_by)
      OR (
        get_role () = ANY (
          ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
        )
      )
    )
  );

CREATE POLICY "Enable all operations for authenticated users" ON "public"."progress_note_attachment" AS permissive FOR ALL TO authenticated USING (TRUE)
WITH
  CHECK (TRUE);

CREATE POLICY "Enable delete for creator, GLL, LR-Leadership" ON "public"."reminder" AS permissive FOR DELETE TO authenticated USING (
  (
    (auth.uid () = created_by)
    OR (
      get_role () = ANY (
        ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
      )
    )
  )
);

CREATE POLICY "Enable insert for GLL, Nurse, LR-Leadership, LR-GLS, LR-Contact" ON "public"."reminder" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (
    (
      get_role () = ANY (
        ARRAY[
          'GLL'::role_enum,
          'Nurse'::role_enum,
          'Li Ren Leadership'::role_enum,
          'Li Ren GLS'::role_enum,
          'Li Ren Contact'::role_enum
        ]
      )
    )
  );

CREATE POLICY "Enable select for all users" ON "public"."reminder" AS permissive FOR
SELECT
  TO authenticated USING (TRUE);

CREATE POLICY "Enable update for creator, GLL, LR-Leadership" ON "public"."reminder" AS permissive FOR
UPDATE TO authenticated USING (TRUE)
WITH
  CHECK (
    (
      (auth.uid () = created_by)
      OR (
        get_role () = ANY (
          ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
        )
      )
    )
  );

CREATE POLICY "Enable delete for creator, GLL, LR-Leadership" ON "public"."session" AS permissive FOR DELETE TO authenticated USING (
  (
    (auth.uid () = created_by)
    OR (
      get_role () = ANY (
        ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
      )
    )
  )
);

CREATE POLICY "Enable insert for GLL, Nurse, LR-Leadership, LR-GLS, LR-Contact" ON "public"."session" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (
    (
      get_role () = ANY (
        ARRAY[
          'GLL'::role_enum,
          'Nurse'::role_enum,
          'Li Ren Leadership'::role_enum,
          'Li Ren GLS'::role_enum,
          'Li Ren Contact'::role_enum
        ]
      )
    )
  );

CREATE POLICY "Enable select for all users" ON "public"."session" AS permissive FOR
SELECT
  TO authenticated USING (TRUE);

CREATE POLICY "Enable update for creator, GLL, LR-Leadership" ON "public"."session" AS permissive FOR
UPDATE TO public USING (TRUE)
WITH
  CHECK (
    (
      (auth.uid () = created_by)
      OR (
        get_role () = ANY (
          ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
        )
      )
    )
  );

CREATE POLICY "Enable delete for creator, GLL, LR-Leadership" ON "public"."target" AS permissive FOR DELETE TO authenticated USING (
  (
    (auth.uid () = created_by)
    OR (
      get_role () = ANY (
        ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
      )
    )
  )
);

CREATE POLICY "Enable insert for GLL, Nurse, LR-Leadership, LR-GLS, LR-Contact" ON "public"."target" AS permissive FOR INSERT TO authenticated
WITH
  CHECK (
    (
      get_role () = ANY (
        ARRAY[
          'GLL'::role_enum,
          'Nurse'::role_enum,
          'Li Ren Leadership'::role_enum,
          'Li Ren GLS'::role_enum,
          'Li Ren Contact'::role_enum
        ]
      )
    )
  );

CREATE POLICY "Enable select for all users" ON "public"."target" AS permissive FOR
SELECT
  TO authenticated USING (TRUE);

CREATE POLICY "Enable update for creator, GLL, LR-Leadership" ON "public"."target" AS permissive FOR
UPDATE TO authenticated USING (TRUE)
WITH
  CHECK (
    (
      (auth.uid () = created_by)
      OR (
        get_role () = ANY (
          ARRAY['GLL'::role_enum, 'Li Ren Leadership'::role_enum]
        )
      )
    )
  );

CREATE POLICY "Enable insert for service_role" ON "public"."team_member" AS permissive FOR INSERT TO service_role
WITH
  CHECK (TRUE);

CREATE POLICY "Enable read for authenticated users" ON "public"."team_member" AS permissive FOR
SELECT
  TO authenticated,
  anon,
  service_role USING (TRUE);

CREATE POLICY "Enable update for IT-Admin and LR-Leadership" ON "public"."team_member" AS permissive FOR
UPDATE TO authenticated USING (TRUE)
WITH
  CHECK (
    (
      get_role () = ANY (
        ARRAY[
          'IT Admin'::role_enum,
          'Li Ren Leadership'::role_enum
        ]
      )
    )
  );

CREATE TRIGGER case_set_created_meta BEFORE INSERT ON public."case" FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER case_set_updated_meta BEFORE INSERT
OR
UPDATE ON public."case" FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE TRIGGER insert_target
AFTER INSERT ON public."case" FOR EACH ROW
EXECUTE FUNCTION insert_into_target ();

CREATE TRIGGER update_student_name_trigger BEFORE INSERT
OR
UPDATE ON public."case" FOR EACH ROW
EXECUTE FUNCTION update_student_name ();

CREATE TRIGGER set_handlers_after_delete
AFTER DELETE ON public.case_handler FOR EACH ROW
EXECUTE FUNCTION trigger_set_handlers ();

CREATE TRIGGER set_handlers_after_insert
AFTER INSERT ON public.case_handler FOR EACH ROW
EXECUTE FUNCTION trigger_set_handlers ();

CREATE TRIGGER set_handlers_after_update
AFTER
UPDATE ON public.case_handler FOR EACH ROW
EXECUTE FUNCTION trigger_set_handlers ();

CREATE TRIGGER set_main_handler_before_insert BEFORE INSERT ON public.case_handler FOR EACH ROW
EXECUTE FUNCTION trigger_set_main_handler ();

CREATE TRIGGER page_set_created_meta BEFORE INSERT ON public.page FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER page_set_updated_meta BEFORE INSERT
OR
UPDATE ON public.page FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE TRIGGER progress_note_set_created_meta BEFORE INSERT ON public.progress_note FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER progress_note_set_updated_meta BEFORE INSERT
OR
UPDATE ON public.progress_note FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE TRIGGER reminder_set_created_meta BEFORE INSERT ON public.reminder FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER reminder_set_updated_meta BEFORE INSERT
OR
UPDATE ON public.reminder FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE TRIGGER update_reminder_is_completed BEFORE
UPDATE ON public.reminder FOR EACH ROW
EXECUTE FUNCTION set_completed_meta ();

CREATE TRIGGER session_set_created_meta BEFORE INSERT ON public.session FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER session_set_updated_meta BEFORE INSERT
OR
UPDATE ON public.session FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE TRIGGER trigger_on_session_status BEFORE
UPDATE ON public.session FOR EACH ROW
EXECUTE FUNCTION trigger_on_session_status ();

CREATE TRIGGER trigger_set_next_upcoming_session
AFTER INSERT
OR DELETE
OR
UPDATE ON public.session FOR EACH ROW
EXECUTE FUNCTION trigger_set_next_upcoming_session ();

CREATE TRIGGER target_set_created_neta_on_create BEFORE INSERT ON public.target FOR EACH ROW
EXECUTE FUNCTION trigger_set_created_meta ();

CREATE TRIGGER target_set_updated_meta_on_create BEFORE INSERT ON public.target FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();

CREATE TRIGGER target_set_updated_meta_on_update BEFORE
UPDATE ON public.target FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_meta ();